@namespace Havit.Blazor.Components.Web.Bootstrap.Internal

<div class="@CssClassHelper.Combine("hx-input-tags-control",
									GetFormControlCssClasses(),
									GetNakedCssClasses(),
									this.currentlyFocused ? "hx-input-tags-control-focused" : null,
                                    this.EnabledEffective ? null : "hx-input-tags-control-disabled",
									this.CssClass)"
     @onclick="async () => await autosuggestInput.FocusAsync()"
     @onclick:stopPropagation>

    @foreach (string tag in ValueEffective)
    {
        <HxBadge Settings="this.TagBadgeSettingsEffective"
             CssClass="@CssClassHelper.Combine("hx-tag", this.TagBadgeSettingsEffective.CssClass)">@* Looks weird but should work :-D *@
            @tag
            @if (this.EnabledEffective)
            {
                <span class="hx-tag-remove-button" @onclick="async () => await HandleRemoveClickAsync(tag)" @onclick:stopPropagation role="button" tabindex="0">
                    <HxIcon Icon="BootstrapIcon.X" />
                </span>
            }
        </HxBadge>
    }

    @if (ShowAddButtonEffective && EnabledEffective && !currentlyFocused && !isDropdownOpened)
    {
        var showAddButtonText = !this.ValueEffective.Any() && !String.IsNullOrEmpty(AddButtonText);

        <HxBadge Settings="this.TagBadgeSettingsEffective"
             CssClass="@CssClassHelper.Combine("hx-tag hx-tag-add-button", this.TagBadgeSettingsEffective.CssClass)"
             role="button" tabindex="0">
            <span class="hx-tag-add-button-icon" role="button">
                @* We don't need to catch onClick here as it gets propagated to parent div*@
                <HxIcon Icon="BootstrapIcon.PlusLg" />
            </span>
            @if (showAddButtonText)
            {
                <span class="hx-tag-add-button-text">@AddButtonText</span>
            }
        </HxBadge>
    }

    <div id="@dropdownId" class="@CssClassHelper.Combine("dropdown", (LabelTypeEffective == Havit.Blazor.Components.Web.Bootstrap.LabelType.Floating) ? "form-floating" : null)">
         <HxBadge Settings="this.TagBadgeSettingsEffective" tabindex="0">
            <HxInputTagsAutosuggestInput @ref="autosuggestInput"
                                        InputId="@InputId"
                                        EnabledEffective="@EnabledEffective"
                                        Value="@userInput"
                                        OnInputInput="HandleInputInput"
                                        OnInputFocus="HandleInputFocus"
                                        OnInputBlur="HandleInputBlur"
                                        OnInputMouseDown="HandleInputMouseDown"
                                        OnInputKeyDown="HandleInputKeyDown"
                                        Placeholder="@(ValueEffective.Any() ? null : Placeholder)"
                                        CssClass="border-0 flex-grow-1"
                                        Offset="@InputOffset" />
         </HxBadge>
        @if (dataProviderInProgress)
        {
            <HxSpinner Type="SpinnerType.Border" Size="SpinnerSize.Small" />
        }
        <HxAutosuggestItems TItem="string" Items="@suggestions" OnItemClick="HandleItemClick">
            <ItemTemplate>
                @context
            </ItemTemplate>
        </HxAutosuggestItems>
    </div>

</div>